#!/usr/bin/python
# -*- coding: utf-8 -*-

############################################################################
#                                                                          #
# Profesor Dumbledore Bot                                                  # 
# Copyright (C) 2019 - Pikaping                                            #
#                                                                          #
# This program is free software: you can redistribute it and/or modify     #
# it under the terms of the GNU Affero General Public License as           #
# published by the Free Software Foundation, either version 3 of the       #
# License, or (at your option) any later version.                          #
#                                                                          #
# This program is distributed in the hope that it will be useful,          #
# but WITHOUT ANY WARRANTY; without even the implied warranty of           #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
# GNU Affero General Public License for more details.                      #
#                                                                          #
# You should have received a copy of the GNU Affero General Public License #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.   #
#                                                                          #
############################################################################

import enum
import datetime

from itertools import cycle
from profdumbledorebot.db import get_declarative_base, get_db_engine
from sqlalchemy import Column, Boolean, Integer, String, UnicodeText, BigInteger, ForeignKey, DateTime


Base = get_declarative_base()

@enum.unique
class PortalType(enum.IntEnum):
    GREENHOUSE = 1
    FORTRESS = 2
    NONE = 0


@enum.unique
class Professions(enum.IntEnum):
    PROFESSOR = 1
    MAGIZOOLOGIST = 2
    AUROR = 3
    NONE = 0


@enum.unique
class Teams(enum.IntEnum):
    RON = 1
    HARRY = 2
    HERMIONE = 3
    NONE = 0


@enum.unique
class Houses(enum.IntEnum):
    NONE = 0
    GRYFFINDOR = 1
    HUFFLEPUFF = 2
    RAVENCLAW = 3
    SLYTHERIN = 4


@enum.unique
class Types(enum.IntEnum):
    TEXT = 0
    BUTTON_TEXT = 1
    STICKER = 2
    DOCUMENT = 3
    PHOTO = 4
    AUDIO = 5
    VOICE = 6
    VIDEO = 7


@enum.unique
class ValidationRequiered(enum.IntEnum):
    NO_VALIDATION = 0
    VALIDATION = 1


@enum.unique
class WarnLimit(enum.IntEnum):
    SO_EXTRICT = 3
    EXTRICT = 5
    LOW_PERMISIVE = 10
    MED_PERMISIVE = 25
    HIGH_PERMISIVE = 50
    SO_TOLERANT = 100


class AdminGroups(Base):
    __tablename__ = 'admingroups'

    id = Column(BigInteger, ForeignKey('groups.id'), primary_key=True)
    admin = Column(Boolean, default=False)
    welcome = Column(Boolean, default=False)
    ejections = Column(Boolean, default=False)
    admin_bot = Column(Boolean, default=False)

    def set_admset_from_str(self, settings_str):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''

        if settings_str == 'welcome':
            self.welcome = not self.welcome

        elif settings_str == 'ejections':
            self.ejections = not self.ejections

        elif settings_str == 'admin':
            self.admin = not self.admin

        elif settings_str == 'admin_bot':
            self.admin_bot = not self.admin_bot


class Challenge(Base):
    __tablename__ = "fortress"

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    group_id = Column(BigInteger, ForeignKey('group.id'))
    portal = Column(BigInteger, ForeignKey('portal.id'))
    level = Column(Integer, default=0)
    rune = Column(Integer, default=0)
    max_a = Column(Integer, default=0)
    max_m = Column(Integer, default=0)
    max_p = Column(Integer, default=0)
    time = Column(DateTime, nullable=True)


class CustomCommands(Base):
    __tablename__ = "custom_commands"

    id = Column(BigInteger, primary_key=True)
    chat_id = Column(BigInteger, ForeignKey('groups.id'))
    cmds = Column(String(30), nullable=False)
    media = Column(UnicodeText, nullable=False)
    command_type = Column(Integer, default=Types.TEXT.value)


class CommandsButtons(Base):
    __tablename__ = "commands_urls"

    id = Column(Integer, primary_key=True)
    cmd_id = Column(BigInteger, ForeignKey('custom_commands.id'))
    name = Column(UnicodeText, nullable=False)
    url = Column(UnicodeText, nullable=False)
    same_line = Column(Boolean, default=False)

    def __init__(self, name, url, same_line=False):
        self.name = name
        self.url = url
        self.same_line = same_line


class Portals(Base):
    __tablename__ = "portal"

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    name = Column(String(128), nullable=True)
    latitude = Column(BigInteger, nullable=False)
    longitude = Column(BigInteger, nullable=False)
    portal_type = Column(Integer, default=PortalType.DEFAULT.value)


class Group(Base):
    __tablename__ = 'group'

    id = Column(BigInteger, primary_key=True)
    title = Column(String(120))
    language = Column(String(7), default='es_ES')
    timezone = Column(String(60), default='Europe/Madrid')
    banned = Column(Boolean, default=False)

    def __repr__(self):
        return '<Group(title={}, alias={})>'.format(self.title, self.alias)


class LinkedGroups(Base):
    __tablename__ = 'linkedgroups'

    admin_id = Column(BigInteger, ForeignKey('admingroups.id'))
    linked_id = Column(BigInteger, ForeignKey('groups.id'), primary_key=True)
    label = Column(String(60), nullable=True)
    link = Column(String(60), nullable=True)


class Locations(Base):
    __tablename__ = "locations"

    id = Column(BigInteger, ForeignKey('groups.id'))
    name = Column(String(200), nullable=False)
    country = Column(String(128), nullable=False)
    state = Column(String(128), nullable=False)
    city = Column(String(128), nullable=False)
    zone = Column(String(128), nullable=False)
    latitude = Column(BigInteger, nullable=False)
    longitude = Column(BigInteger, nullable=False)
    url = Column(String(200), nullable=False)


class News(Base):
    __tablename__ = "news"

    id = Column(BigInteger, primary_key=True)
    alias = Column(String(60))
    active = Column(Boolean, default=False)


class NewsSubs(Base):
    __tablename__ = "news_subs"

    id = Column(BigInteger, primary_key=True)
    user_id = Column(BigInteger)
    news_id = Column(BigInteger, ForeignKey('news.id'))
    status = Column(Boolean, default=False)


class Notes(Base):
    __tablename__ = "notes"

    id = Column(BigInteger, primary_key=True)
    group_id = Column(BigInteger, ForeignKey('groups.id'))
    date = Column(DateTime)
    text = Column(UnicodeText)
    repeat = Column(BigInteger, default=0)


class Plants(Base):
    __tablename__ = "plants"

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    group_id = Column(BigInteger, ForeignKey('group.id'))
    portal = Column(BigInteger, ForeignKey('portal.id'), nullable=True)
    plant_type = Column(Integer, default=0)
    grow_end = Column(DateTime, nullable=True)
    harvest_end = Column(DateTime, nullable=True)
    alerted = Column(Boolean, default=False)


class Rules(Base):
    __tablename__ = "rules"

    chat_id = Column(String(14), primary_key=True)
    rules = Column(UnicodeText, default="")

    def __init__(self, chat_id):
        self.chat_id = chat_id

    def __repr__(self):
        return "<Chat {} rules: {}>".format(self.chat_id, self.rules)


class SettingsAdmin(Base):
    __tablename__ = 'settingsadmin'

    id = Column(BigInteger, ForeignKey('groups.id'), primary_key=True)
    admin = Column(Boolean, default=False)
    welcome = Column(Boolean, default=False)
    ejections = Column(Boolean, default=False)

    def set_setadm_from_str(self, settings_str):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''

        if settings_str == 'welcome':
            self.welcome = not self.welcome

        elif settings_str == 'ejections':
            self.ejections = not self.ejections

        elif settings_str == 'admin':
            self.admin = not self.admin


class SettingsGroup(Base):
    __tablename__ = 'settings_groups'

    id = Column(BigInteger, primary_key=True)
    jokes = Column(Boolean, default=False)
    games = Column(Boolean, default=False)
    warn = Column(Enum(WarnLimit), default=WarnLimit.HIGH_PERMISIVE)
    hard = Column(Boolean, default=False)
    reply_on_group = Column(Boolean, default=False)

    def set_settings_from_str(self, settings_str):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''

        if settings_str == 'jokes':
            self.jokes = not self.jokes

        elif settings_str == 'games':
            self.games = not self.games

        elif settings_str == 'warn':
            valid_warn_limits = cycle(list(WarnLimit))

            for i in valid_warn_limits:
                if self.warn is i.value:
                    self.warn = next(valid_warn_limits).value
                    break
                    
        elif settings_str == 'hard':
            self.hard = not self.hard
                    
        elif settings_str == 'reply':
            self.reply_on_group = not self.reply_on_group


class SettingsJoin(Base):
    __tablename__ = 'settingsjoin'

    id = Column(BigInteger, ForeignKey('groups.id'), primary_key=True)
    max_members = Column(Integer, default=0)
    delete_cooldown = Column(Integer, default=0)
    delete_header = Column(Boolean, default=False)
    val_alert = Column(Boolean, default=False)
    requirment = Column(Integer, default=ValidationRequiered.NO_VALIDATION.value)

    def set_joinset_from_str(self, settings_str):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''
        if settings_str == 'delete_header':
            self.delete_header = not self.delete_header

        elif settings_str == 'val_alert':
            self.val_alert = not self.val_alert

        elif settings_str == 'requirment':
            valid_req_limits = cycle(list(ValidationRequiered))

            for i in valid_req_limits:
                if self.requirment is i.value:
                    self.requirment = next(valid_req_limits).value
                    break


class SettingsNurse(Base):
    __tablename__ = 'settingsnurse'

    id = Column(BigInteger, primary_key=True)
    admin_too = Column(Boolean, default=False)
    animation = Column(Boolean, default=False)
    command = Column(Boolean, default=False)
    contact = Column(Boolean, default=False)    
    games = Column(Boolean, default=False)
    location = Column(Boolean, default=False)
    photo = Column(Boolean, default=False)
    reply = Column(UnicodeText, nullable=True)
    sticker = Column(Boolean, default=False)
    text = Column(Boolean, default=False)
    urls = Column(Boolean, default=False)
    video = Column(Boolean, default=False)
    voice = Column(Boolean, default=False)
    warn = Column(Boolean, default=False)

    def set_nurseset_from_str(self, settings_str):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''
        if settings_str == 'url':
            self.urls = not self.urls

        elif settings_str == 'cmd':
            self.command = not self.command

        elif settings_str == 'contact':
            self.contact = not self.contact

        elif settings_str == 'animation':
            self.animation = not self.animation

        elif settings_str == 'photo':
            self.photo = not self.photo

        elif settings_str == 'games':
            self.games = not self.games

        elif settings_str == 'text':
            self.text = not self.text

        elif settings_str == 'sticker':
            self.sticker = not self.sticker

        elif settings_str == 'location':
            self.location = not self.location

        elif settings_str == 'url':
            self.audio = not self.audio

        elif settings_str == 'video':
            self.video = not self.video

        elif settings_str == 'warn':
            self.warn = not self.warn

        elif settings_str == 'admin_too':
            self.admin_too = not self.admin_too


class Twitter(Base):
    __tablename__ = 'twitter'

    id = Column(BigInteger, primary_key=True, autoincrement=True)
    name = Column(String(100), unique=True)
    last = Column(BigInteger, default=0)


class TwitterSubs(Base):
    __tablename__ = "tw_subs"

    id = Column(BigInteger, primary_key=True)
    user_id = Column(BigInteger)
    news_id = Column(BigInteger, ForeignKey('twitter.id'))


class User(Base):
    __tablename__ = 'user'

    id = Column(BigInteger, primary_key=True)
    alias = Column(String(33), unique=True)
    level = Column(Integer, nullable=True)
    profession = Column(Enum(Professions), default=Professions.NONE)
    house = Column(Enum(Houses), default=Houses.NONE)
    team = Column(Enum(Teams), default=Teams.NONE)
    validated = Column(Boolean, default=False)
    flag = Column(String(12), default=None)
    banned = Column(Boolean, default=False)
    alerts = Column(Boolean, default=False)
    fclists = Column(Boolean, default=False)
    friend_id = Column(String(12), default=None)
    language = Column(String(7), default='es_ES')

    def __str__(self):
        return "User <id: {}><username: {}><trainer_name: {}>".format(
            self.id, self.username, self.trainer_name
        )


class UserGroup(Base):
    __tablename__ = 'usergroup'

    user_id = Column(BigInteger, primary_key=True)
    group_id = Column(BigInteger, ForeignKey('groups.id'), primary_key=True)
    warn = Column(Integer, default=0)
    total_messages = Column(Integer, default=0)
    join_date = Column(DateTime, default=datetime.datetime.utcnow)
    last_message = Column(DateTime, default=datetime.datetime.utcnow)


class Welcome(Base):
    __tablename__ = "welcome"

    chat_id = Column(String(14), primary_key=True)
    should_welcome = Column(Boolean, default=False)
    custom_welcome = Column(UnicodeText, nullable=True)
    welcome_type = Column(Integer, default=Types.TEXT.value)
    timer = Column(Integer, default=0)

    def __init__(self, chat_id):
        self.chat_id = chat_id

    def __repr__(self):
        return "<Chat {} should Welcome new users: {}>".format(self.chat_id, self.should_welcome)
    
    def set_welcomeset_from_str(self):
        '''
        This method takes a settings column name and apply it to the Group
        object
        '''
        self.should_welcome = not self.should_welcome


class WelcomeButtons(Base):
    __tablename__ = "welcome_urls"

    id = Column(Integer, primary_key=True, autoincrement=True)
    chat_id = Column(String(14), primary_key=True)
    name = Column(UnicodeText, nullable=False)
    url = Column(UnicodeText, nullable=False)
    same_line = Column(Boolean, default=False)

    def __init__(self, chat_id, name, url, same_line=False):
        self.chat_id = str(chat_id)
        self.name = name
        self.url = url
        self.same_line = same_line


def create_databases():
    global Base

    engine = get_db_engine()
    Base.metadata.create_all(engine)


